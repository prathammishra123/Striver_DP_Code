SIMPLE---
#include <bits/stdc++.h>
long getMaximumProfit(long *prices, int n)
    {
      
      long  j;
      long  ans=0;
      for(j=1;j<n;j++)
      {
        if(prices[j-1]<=prices[j]){ans+=prices[j]-prices[j-1];}
      }
      return ans;
    }


DP APPROACH-
#include <bits/stdc++.h>
long getMaximumProfit(long *prices, int n)
    {
      vector<vector<long >> dp(n+1,vector<long >(2,0));

      long buy=0,ind;
      for(ind=n-1;ind>=0;ind--)
      {
        for(buy=0;buy<=1;buy++)
        {
                long   opt1=0;
                long  opt2=0;
                 if(buy==0)
                 {
                    opt1=0+dp[ind+1][buy];
                    opt2=-(prices[ind])+dp[ind+1][1];
                 }
                 if(buy==1)
                  {
                    opt1=0+dp[ind+1][buy];
                    opt2=+(prices[ind])+dp[ind+1][0];
                  }
                  dp[ind][buy]=max(opt1,opt2);
        }
      }
      return dp[0][0];
    }