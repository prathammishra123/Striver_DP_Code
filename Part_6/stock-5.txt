MEMOIZED-

int getAns(vector<int> Arr, int ind, int buy, int n, vector<vector<int>> &dp ){

    if(ind>=n) return 0; //base case
    
    if(dp[ind][buy]!=-1)
        return dp[ind][buy];
        
    int profit;
    
    if(buy==0){// We can buy the stock
        profit = max(0+getAns(Arr,ind+1,0,n,dp), -Arr[ind]+getAns(Arr,ind+1,1,n,dp));
    }
    
    if(buy==1){// We can sell the stock
        profit = max(0+getAns(Arr,ind+1,1,n,dp), Arr[ind]+getAns(Arr,ind+2,0,n,dp));
    }
    
    return dp[ind][buy] = profit;
}

TABULAR-
class Solution {
public:
int maxProfit(vector<int>& prices) 
{
        int n=prices.size();
       vector<vector<long >> dp(n+2,vector<long >(2,0));
      
      long buy=0,ind;
      for(ind=n-1;ind>=0;ind--)
      {
        for(buy=0;buy<=1;buy++)
        {
                long   opt1=0;
                long  opt2=0;
                 if(buy==0)
                 {
                    opt1=0+dp[ind+1][buy];
                    opt2=-(prices[ind])+dp[ind+1][1];
                 }
                 if(buy==1)
                  {
                    opt1=0+dp[ind+1][buy];
                    opt2=+(prices[ind])+dp[ind+2][0];
                  }
                  dp[ind][buy]=max(opt1,opt2);
        }
      }
      return dp[0][0];  
    }
};

