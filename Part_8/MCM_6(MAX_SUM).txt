MEMOIZED-
class Solution 
{
public:
int solve(int i, int n,vector<int>&dp,int len,vector<int>&arr)
    {
      if(i==n){return 0;}
      if(dp[i]!=-1){return dp[i];}
      int maxi=INT_MIN;
      int max_ele=INT_MIN;
      for(int k=i;k<min(n,i+len);k++)
      {
             max_ele=max(max_ele,arr[k]);
            int ans=(k-i+1)*max_ele+solve(k+1,n,dp,len,arr);
            maxi=max(ans,maxi);
      }
      return dp[i]=maxi;
    }
    int maxSumAfterPartitioning(vector<int>& arr, int k) 
    {
        int n=arr.size();
         vector<int> dp(n,-1);
        return solve(0,n,dp,k,arr);
    }
};

TABULAR-
class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int len) 
    {
         int n=arr.size();
         vector<int> dp(n+1,0);
         for(int i=n-1;i>=0;i--)
         {
            int maxi=INT_MIN;
            int max_ele=INT_MIN;
             for(int k=i;k<min(n,i+len);k++)
             {
             max_ele=max(max_ele,arr[k]);
            int ans=(k-i+1)*max_ele+dp[k+1];
            maxi=max(ans,maxi);
            }
          dp[i]=maxi; 
         }
        return dp[0];
    }
};
