class Solution 
{
public:
    int solve(vector<int>&hist,int n,int m)
    {
         vector<int> next_sma_left;
         vector<int> next_sma_right;
         m=hist.size();
         stack<pair<int,int>> s;
         int j;
         for(j=m-1;j>=0;j--)
         {
             if(s.size()==0){next_sma_right.push_back(-1);}
             else if(s.size()>0 && s.top().first<hist[j]){next_sma_right.push_back(s.top().second);}
             else if(s.size()>0 && s.top().first>=hist[j])
             {
                 while(s.size()>0 && s.top().first>=hist[j])
                 {
                     s.pop();
                 }
                 if(s.size()==0){next_sma_right.push_back(-1);}
                 else{next_sma_right.push_back(s.top().second);}
             }
              s.push({hist[j],j});
         }
        
        while(s.size()!=0){s.pop();}
         reverse(next_sma_right.begin(),next_sma_right.end());
         for(j=0;j<m;j++)
         {
             if(s.size()==0){next_sma_left.push_back(-1);}
             else if(s.top().first<hist[j]){next_sma_left.push_back(s.top().second);}
             else
             {
                 while(s.size()>0 && s.top().first>=hist[j])
                 {
                     s.pop();
                 }
                 if(s.size()==0){next_sma_left.push_back(-1);}
                 else{next_sma_left.push_back(s.top().second);}
             }
              s.push({hist[j],j});
         }
         int val=0;
         for(j=0;j<m;j++)
         {
             int left=next_sma_left[j];
             if(left==-1){left=-1;}
             int right=next_sma_right[j];
             if(right==-1){right=m;}
             val=max(val,(hist[j]*(right-left-1))); 
         }
         return val;
    }
    int maximalRectangle(vector<vector<char>>& matrix) 
    {
        int ans=0;
        int i,j;
        int n=matrix.size();
        int m=matrix[0].size();
        vector<int> hist(m,0);
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(matrix[i][j]=='1')
                {
                   hist[j]++;
                }
                else
                {
                    hist[j]=0;
                }
            }
            ans=max(ans,solve(hist,n,m));
        }
        return ans;
    }
};