MEMOIZED-

#include<bits/stdc++.h>

using namespace std;

int maxChocoUtil(int i, int j1, int j2, int n, int m, vector < vector < int >> 
& grid, vector < vector < vector < int >>> & dp) {
  if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m)
    return -1e9;

  if (i == n - 1) {
    if (j1 == j2)
      return grid[i][j1];
    else
      return grid[i][j1] + grid[i][j2];
  }

  if (dp[i][j1][j2] != -1)
    return dp[i][j1][j2];

  int maxi = INT_MIN;
  for (int di = -1; di <= 1; di++) {
    for (int dj = -1; dj <= 1; dj++) {
      int ans;
      if (j1 == j2)
        ans = grid[i][j1] + maxChocoUtil(i + 1, j1 + di, j2 + dj, n, m, grid, dp);
      else
        ans = grid[i][j1] + grid[i][j2] + maxChocoUtil(i + 1, j1 + di, j2 + dj, n,
        m, grid, dp);
      maxi = max(maxi, ans);
    }
  }
  return dp[i][j1][j2] = maxi;
}

int maximumChocolates(int n, int m, vector < vector < int >> & grid) {

  vector < vector < vector < int >>> dp(n, vector < vector < int >> (m, vector < int
  > (m, -1)));

  return maxChocoUtil(0, 0, m - 1, n, m, grid, dp);
}

int main() {

   vector<vector<int> > matrix{
      {2,3,1,2},
      {3,4,2,2},
      {5,6,3,5},
  };

  int n = matrix.size();
  int m = matrix[0].size();

  cout << maximumChocolates(n, m, matrix);
}

TABULAR-

int maximumChocolates(int n, int m, vector<vector<int>> &grid)
{
  int dp[n][m][m];
    int i,j,k;
    int dx1,dx2;
    int val;
    for(i=0;i<m;i++)
    {
        for(j=0;j<m;j++)
        {
            if(i==j){dp[n-1][i][j]=grid[n-1][j];}
            else {dp[n-1][i][j]=grid[n-1][j]+grid[n-1][i];}
        }
    }
    for(i=n-2;i>=0;i--)
    {  
        for(j=0;j<m;j++)
        {
           for(k=0;k<m;k++)
           {    val=0;
               for(dx1=-1;dx1<=1;dx1++)
               {
                  for(dx2=-1;dx2<=1;dx2++)
                  {
                      int ny1=j+dx1;
                      int ny2=k+dx2;
                      if(ny1>=0 && ny1<m && ny2>=0 && ny2<m)
                      {
                          val=max(val,dp[i+1][ny1][ny2]);
                      }
                  }
               }
            if(j==k){dp[i][j][k]=val+grid[i][j];}
           else {dp[i][j][k]=val+grid[i][j]+grid[i][k];}
           }    
        }
         
    }
    return dp[0][0][m-1];
}