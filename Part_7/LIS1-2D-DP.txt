MEMOIZED-

class Solution {
public:
    int solve(int ind ,int prev , vector<vector<int>>&dp,int n,vector<int>&nums)
    {
        if(ind==n){return 0;}
        if(dp[ind][prev+1]!=-1){return dp[ind][prev+1];}
        int not_take=solve(ind+1,prev,dp,n,nums);
        int take=0;
        if(prev==-1 || nums[ind]>nums[prev])
        {
            take=1+solve(ind+1,ind,dp,n,nums);
        }
        return dp[ind][prev+1]=max(take,not_take);
    }
    int lengthOfLIS(vector<int>& nums) 
    {
       int n=nums.size(); 
       vector<vector<int>> dp(n,vector<int>(n+1,-1));
       return solve(0,-1,dp,n,nums) ;
    }
};


TABULAR-

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) 
    {
       int n=nums.size(); 
       vector<vector<int>> dp(n+1,vector<int>(n+1,0));
       int ind,prev;
       for(ind=n-1;ind>=0;ind--)
       {
           for(prev=ind-1;prev>=-1;prev--)
           {
             int not_take=dp[ind+1][prev+1];
             int take=0;
             if(prev==-1 || nums[ind]>nums[prev])
             {
             take=1+dp[ind+1][ind+1];
             }
             dp[ind][prev+1]=max(take,not_take); 
           }
       }
       return dp[0][0];  
    }
};
